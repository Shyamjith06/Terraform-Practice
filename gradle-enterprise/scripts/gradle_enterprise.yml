---
# kind: scheduler-kubernetes
apiVersion: v1
kind: ConfigMap
metadata:
  name: gradle-database-cron-config
data:
  postgres: |
    # do daily/weekly/monthly maintenance
    # min	hour	day	    month	weekday	command
    */15	*	    *	    *	    *	    run-parts /etc/periodic/15min
    0	    *	    *	    *	    *	    run-parts /etc/periodic/hourly
    0	    2	    *	    *	    *	    run-parts /etc/periodic/daily
    0	    3	    *	    *	    6	    run-parts /etc/periodic/weekly
    0	    5	    1	    *	    *	    run-parts /etc/periodic/monthly
    *       *       *       *       *       /opt/gradle/scripts/disk_usage.sh
    

---
# kind: scheduler-kubernetes
apiVersion: v1
kind: ConfigMap
metadata:
  name: gradle-database-create-backup-config
data:
  system_backup.sh: |
    #!/usr/bin/env bash
    set -e
    
    logger() {
        echo "$(date +'%Y-%m-%d %T') - $1";
    }
    
    subject_for_exit_code() {
        local CODE=$1
        if [[ ${CODE} -eq 0 ]]; then
            echo "[Gradle Enterprise] Scheduled backup successful"
        elif [[ ${CODE} -eq 2 ]]; then
            echo "[Gradle Enterprise, ERROR] Scheduled backup cancelled due to low disk space"
        else
            echo "[Gradle Enterprise, ERROR] Scheduled backup failed"
        fi
    }
    
    LOG_DIR=/opt/gradle/data/logs
    
    logger "Running Gradle Enterprise backup"
    
    unset FAILED
    /opt/gradle/scripts/database_backup.sh 2>&1 | tee ${LOG_DIR}/backup-$(date +'%Y%m%d-%H%M%S').log ${LOG_DIR}/backup.log &
    
    PID=`jobs -p`
    trap "kill ${PID}" EXIT
    wait ${PID}
    
    trap - EXIT
    
    BACKUP_EXIT_CODE=${PIPESTATUS[0]}
    

---
# kind: scheduler-kubernetes
apiVersion: v1
kind: ConfigMap
metadata:
  name: gradle-database-restore-backup-config
data:
  restore_snapshot.sh: |
    #!/usr/bin/env bash
    set -e
    
    SUPPORTED_DATABASE_ARCHIVE_VERSION=2
    
    DATA_DIR=
    
    # Or, in kubernetes
    if [ -z ${DATA_DIR} ]; then
        DATA_DIR=/var/lib/postgresql/gradle-enterprise/data
    fi
    
    CURRENT_OWNER=$(stat -c "%u:%g" "$DATA_DIR")
    
    while getopts "ys" opt; do
      case "$opt" in
        y)
            ASSUME_YES=YES
            ;;
        s)
            SKIP_ARCHIVE_VALIDATION=YES
            ;;
        -?*)
            echo "ERROR: Unsupported parameter!"
            HELP=YES
            ;;
        *)
            break
      esac
    done
    
    shift $((OPTIND-1))
    ARCHIVE_FILE=$@
    if [ -z "$ARCHIVE_FILE" ]; then
        HELP=YES
    fi
    
    # Print Usage
    if [ -n "$HELP" ]; then
      echo "Usage: restore_snapshot.sh [-y] \"{fileName}\" "
      echo ""
      echo "   -y, Assume that the answer to any question which would be asked is yes. Useful for unattended executions"
      echo "   [fileName] Location of backup archive."
      echo ""
      echo "   Example: restore_snapshot.sh -y /opt/gradle/data/backups/backup.zip"
      echo ""
      exit
    fi
    
    # Check to make sure the archive file exists
    if [ ! -f "${ARCHIVE_FILE}" ]; then
        echo "The backup file '$ARCHIVE_FILE' does not exist."
        exit 1
    fi
    
    # Check the database is not running
    if [[ -f ${DATA_DIR}/postmaster.pid ]]; then
        echo "The database is still running, please shut down Gradle Enterprise before trying again."
        exit 1
    fi
    
    # Use 7zip to extract, since even for zips unzip can have trouble sometimes
    PACKAGE_NAME="p7zip"
    BASE_COMMAND="7za"
    TEST_COMMAND="7za t"
    LIST_COMMAND="7za l"
    EXTRACT_COMMAND="7za e -so --"
    
    # Check to make sure required utility is installed on the host
    hash ${BASE_COMMAND} 2>/dev/null || {
        echo >&2 "${BASE_COMMAND} is required but is not installed. This can typically be done by installing the '${PACKAGE_NAME}' package from your distribution's repositories.";
        exit 1;
    }
    
    if [ -z "$SKIP_ARCHIVE_VALIDATION" ]; then
        # Check to make sure archive file is a valid archive file
        # Pipe output to /dev/null to suppress noise
        echo "Validating archive integrity. This can take some time."
        if ! ${TEST_COMMAND} ${ARCHIVE_FILE} > /dev/null ; then
            echo "The backup file '$ARCHIVE_FILE' is not a valid archive or is corrupt."
            exit 1
        fi
    fi
    
    # Archive filename differs depending on extension
    DATA_FILENAME_7Z=data.tar.gz
    DATA_FILENAME_ZIP="-"
    WAL_ARCHIVE_FILENAME=archive.tar.gz
    BACKUP_VERSION_FILENAME=archive_version.txt
    RECOVERY_FILENAME=recovery.conf
    XLOG_DIR=${DATA_DIR}/pg_xlog
    if [[ $ARCHIVE_FILE =~ ^.*\.zip$ ]]; then
        DATA_FILENAME="${DATA_FILENAME_ZIP}"
    else
        DATA_FILENAME="${DATA_FILENAME_7Z}"
    fi
    
    # Check to ensure archive file contains expected contents
    declare -a archive_files=("${RECOVERY_FILENAME}" "${DATA_FILENAME}" "${WAL_ARCHIVE_FILENAME}" "${BACKUP_VERSION_FILENAME}")
    for entry in "${archive_files[@]}"
    do
      if [[ $(${LIST_COMMAND} ${ARCHIVE_FILE}) != *${entry}* ]]; then
        echo "The backup file ${ARCHIVE_FILE} contents are incomplete. Missing file ${entry}."
        exit 1
      fi
    done
    
    # Check to ensure archive is in supported format
    DATABASE_ARCHIVE_VERSION=$(${EXTRACT_COMMAND} ${ARCHIVE_FILE} ${BACKUP_VERSION_FILENAME} 2>/dev/null | tee)
    
    if [ "$DATABASE_ARCHIVE_VERSION" -gt "$SUPPORTED_DATABASE_ARCHIVE_VERSION" ]
    then
        echo "The backup archive is not compatible with the current version of Gradle Enterprise.  Please contact support at enterprise-support@gradle.com for assistance."
        exit 1
    fi
    
    if [ -z "$ASSUME_YES" ]; then
        # Warn the user that this is a destructive operation and explicitly require them to accept
        echo "****************************************************************************************"
        echo "* WARNING: Restoring from backup archive will destroy any existing data in the system. *"
        echo "****************************************************************************************"
    
        read -r -p "Proceed? [y/N] " response
        if [[ ${response} =~ ^([yY][eE][sS]|[yY])$ ]]
        then
            rm -rf ${DATA_DIR}/*
        else
            exit 0
        fi
    else
        rm -rf ${DATA_DIR}/*
    fi
    
    # Extract archive into PostgreSQL data directory
    echo "Extract data and WAL archive files. This can take some time."
    ${EXTRACT_COMMAND} ${ARCHIVE_FILE} ${DATA_FILENAME} | tar -C ${DATA_DIR} -xz
    ${EXTRACT_COMMAND} ${ARCHIVE_FILE} ${WAL_ARCHIVE_FILENAME} | tar -C ${DATA_DIR} -xz
    
    # Extract recovery.conf file
    ${EXTRACT_COMMAND} ${ARCHIVE_FILE} recovery.conf > "${DATA_DIR}/${RECOVERY_FILENAME}"
    
    # Update PG data directory
    sed -i 's/\/var\/lib\/postgresql\/data/\/var\/lib\/postgresql\/gradle-enterprise\/data/' "${DATA_DIR}/${RECOVERY_FILENAME}"
    
    # Create empty pg_xlog directory
    mkdir -p ${XLOG_DIR}
    chmod 700 ${XLOG_DIR}
    
    # Reset correct permissions
    chown -R ${CURRENT_OWNER} "${DATA_DIR}"
    
    # Delete postmaster.pid if there was one in the backup
    rm ${DATA_DIR}/postmaster.pid
    
    echo "Database successfully restored from '${ARCHIVE_FILE}'."

---

# kind: scheduler-kubernetes
apiVersion: v1
kind: ConfigMap
metadata:
  name: gradle-database-internal-restore-backup-config
data:
  internal_restore_snapshot.sh: |
    #!/usr/bin/env bash
    set -e
    
    # Or, in kubernetes
    if [ -z ${RESTORE_DATA_DIR} ]; then
        RESTORE_DATA_DIR=/var/lib/postgresql/gradle-enterprise/data
    fi
    
    CURRENT_OWNER=$(stat -c "%u:%g" "$RESTORE_DATA_DIR")
    
    while getopts "ys" opt; do
      case "$opt" in
        y)
            ASSUME_YES=YES
            ;;
        s)
            SKIP_ARCHIVE_VALIDATION=YES
            ;;
        -?*)
            echo "ERROR: Unsupported parameter!"
            HELP=YES
            ;;
        *)
            break
      esac
    done
    
    shift $((OPTIND-1))
    ARCHIVE_FILE=$@
    if [ -z "$ARCHIVE_FILE" ]; then
        HELP=YES
    fi
    
    # Print Usage
    if [ -n "$HELP" ]; then
    	echo "Usage: restore_snapshot.sh [-y] \"{fileName}\" "
    	echo ""
    	echo "   -y, Assume that the answer to any question which would be asked is yes. Useful for unattended executions"
    	echo "   [fileName] Location of backup archive."
    	echo ""
    	echo "   Example: restore_snapshot.sh -y /opt/gradle/data/backups/backup.zip"
    	echo ""
    	exit
    fi
    
    # Check to make sure the archive file exists
    if [ ! -f "${ARCHIVE_FILE}" ]; then
        echo "The backup file '$ARCHIVE_FILE' does not exist."
        exit 1
    fi
    
    # Check the database is not running
    if [[ -f ${RESTORE_DATA_DIR}/postmaster.pid ]]; then
        echo "The database is still running, please shut down Gradle Enterprise before trying again."
        exit 1
    fi
    
    # Use 7zip to extract, since even for zips unzip can have trouble sometimes
    PACKAGE_NAME="p7zip"
    BASE_COMMAND="7za"
    TEST_COMMAND="7za t"
    LIST_COMMAND="7za l"
    EXTRACT_COMMAND="7za e -so --"
    
    # Check to make sure required utility is installed on the host
    hash ${BASE_COMMAND} 2>/dev/null || {
        echo >&2 "${BASE_COMMAND} is required but is not installed. This can typically be done by installing the '${PACKAGE_NAME}' package from your distribution's repositories.";
        exit 1;
    }
    
    if [ -z "$SKIP_ARCHIVE_VALIDATION" ]; then
        # Check to make sure archive file is a valid archive file
        # Pipe output to /dev/null to suppress noise
        echo "Validating archive integrity. This can take some time."
        if ! ${TEST_COMMAND} ${ARCHIVE_FILE} > /dev/null ; then
            echo "The backup file '$ARCHIVE_FILE' is not a valid archive or is corrupt."
            exit 1
        fi
    fi
    
    # Archive filename differs depending on extension
    DATA_FILENAME_7Z=data.tar.gz
    DATA_FILENAME_ZIP="-"
    WAL_ARCHIVE_FILENAME=archive.tar.gz
    BACKUP_VERSION_FILENAME=archive_version.txt
    RECOVERY_FILENAME=recovery.signal
    XLOG_DIR=${RESTORE_DATA_DIR}/pg_xlog
    if [[ $ARCHIVE_FILE =~ ^.*\.zip$ ]]; then
        DATA_FILENAME="${DATA_FILENAME_ZIP}"
    else
        DATA_FILENAME="${DATA_FILENAME_7Z}"
    fi
    
    # Check to ensure archive file contains expected contents
    declare -a archive_files=("${DATA_FILENAME}" "${WAL_ARCHIVE_FILENAME}" "${BACKUP_VERSION_FILENAME}")
    for entry in "${archive_files[@]}"
    do
      if [[ $(${LIST_COMMAND} ${ARCHIVE_FILE}) != *${entry}* ]]; then
        echo "The backup file ${ARCHIVE_FILE} contents are incomplete. Missing file ${entry}."
        exit 1
      fi
    done
    
    # Check to ensure archive is in supported format
    DATABASE_ARCHIVE_VERSION=$(${EXTRACT_COMMAND} ${ARCHIVE_FILE} ${BACKUP_VERSION_FILENAME} 2>/dev/null | tee)
    
    if [ "$DATABASE_ARCHIVE_VERSION" -gt "$RESTORE_SUPPORTED_DATABASE_ARCHIVE_VERSION" ]
    then
        echo "The backup archive is not compatible with the current version of Gradle Enterprise.  Please contact support at enterprise-support@gradle.com for assistance."
        exit 1
    fi
    
    if [ -z "$ASSUME_YES" ]; then
        # Warn the user that this is a destructive operation and explicitly require them to accept
        echo "****************************************************************************************"
        echo "* WARNING: Restoring from backup archive will destroy any existing data in the system. *"
        echo "****************************************************************************************"
    
        read -r -p "Proceed? [y/N] " response
        if [[ ${response} =~ ^([yY][eE][sS]|[yY])$ ]]
        then
            rm -rf ${RESTORE_DATA_DIR}/*
        else
            exit 0
        fi
    else
        rm -rf ${RESTORE_DATA_DIR}/*
    fi
    
    # Extract archive into PostgreSQL data directory
    echo "Extract data and WAL archive files. This can take some time."
    ${EXTRACT_COMMAND} ${ARCHIVE_FILE} ${DATA_FILENAME} | tar -C ${RESTORE_DATA_DIR} -xz
    ${EXTRACT_COMMAND} ${ARCHIVE_FILE} ${WAL_ARCHIVE_FILENAME} | tar -C ${RESTORE_DATA_DIR} -xz
    
    # This signals to Postgres to initiate a restore if present in the data dir
    touch "${RESTORE_DATA_DIR}/${RECOVERY_FILENAME}"
    
    # Create empty pg_xlog directory
    mkdir -p ${XLOG_DIR}
    chmod 700 ${XLOG_DIR}
    
    # Reset correct permissions
    chown -R ${CURRENT_OWNER} "${RESTORE_DATA_DIR}"
    
    # Delete postmaster.pid if there was one in the backup
    rm ${RESTORE_DATA_DIR}/postmaster.pid
    
    echo "Database successfully restored from '${ARCHIVE_FILE}'."
   
---


# kind: scheduler-kubernetes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gradle-database-volume
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: '250Gi'
  storageClassName: 'gp2-wait'

---
# kind: scheduler-kubernetes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gradle-database-logs-volume
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi
  storageClassName: 'gp2-wait'

---
# kind: scheduler-kubernetes

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gradle-database
  labels:
    app: gradle-enterprise
    component: database
spec:
  selector:
    matchLabels:
      app: gradle-enterprise
      component: database
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  template:
    metadata:
      labels:
        app: gradle-enterprise
        component: database
    spec:
      terminationGracePeriodSeconds: 120
      securityContext:
        runAsUser: 999
        runAsGroup: 0
        fsGroup: 0
      containers:
      - name: database
        image: registry.replicated.com/gradleenterprise/gradle-database-image:38312861
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: 1Gi
            cpu: 250m
          limits:
            memory: 8Gi
            cpu: 2
        env:
        - name: STATSD_HOST
          value: 'gradle-metrics'
        - name: STATSD_PORT
          value: '8125'
        - name: BACKUP_RETENTION
          value: '2'
        - name: BACKUP_CANCELLATION_DISK_SPACE_PERCENTAGE
          value: '10'
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        volumeMounts:
        - mountPath: /var/lib/postgresql/gradle-enterprise/
          name: postgres
          subPath: data
        - mountPath: /opt/gradle/backup/postgres
          name: postgres
          subPath: backups
        - mountPath: /opt/gradle/data/logs
          name: logs
          subPath: database
        - mountPath: /opt/gradle/data/upgrade-logs
          name: upgrade-logs
          readOnly: true
        - mountPath: /var/spool/cron/crontabs
          name: cron-config
        - mountPath: /opt/gradle/scripts/system_backup.sh
          name: create-backup-config
          subPath: system_backup.sh
        - mountPath: /opt/gradle/scripts/restore_snapshot.sh
          name: restore-backup-config
          subPath: restore_snapshot.sh
        - mountPath: /opt/gradle/scripts/internal_restore_snapshot.sh
          name: internal-restore-backup-config
          subPath: internal_restore_snapshot.sh
        - mountPath: /dev/shm
          name: dshm
      initContainers:
      - name: database-upgrade
        image: registry.replicated.com/gradleenterprise/gradle-database-upgrade-image:38312861
        resources:
          requests:
            memory: 512Mi
            cpu: 200m
          limits:
            memory: 1Gi
            cpu: 500m
        volumeMounts:
        - mountPath: /var/lib/postgresql/gradle-enterprise
          name: postgres
          subPath: data
        - mountPath: /var/log/upgrade
          name: upgrade-logs
      imagePullSecrets:
      - name: 'replicatedregistrykey'
      volumes:
      - name: postgres
        persistentVolumeClaim:
          claimName: gradle-database-volume
      - name: logs
        persistentVolumeClaim:
          claimName: gradle-database-logs-volume
      - name: upgrade-logs
        emptyDir: {}
      - name: cron-config
        configMap:
          name: gradle-database-cron-config
          defaultMode: 0644
      - name: create-backup-config
        configMap:
          name: gradle-database-create-backup-config
          defaultMode: 0775
      - name: restore-backup-config
        configMap:
          name: gradle-database-restore-backup-config
          defaultMode: 0775
      - name: internal-restore-backup-config
        configMap:
          name: gradle-database-internal-restore-backup-config
          defaultMode: 0775
      - name: dshm
        emptyDir:
          medium: Memory

---
# kind: scheduler-kubernetes

apiVersion: v1
kind: Service
metadata:
  name: gradle-database
spec:
  selector:
    app: gradle-enterprise
    component: database
  ports:
  - port: 5432

---
# kind: scheduler-kubernetes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gradle-server-logs-volume
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi
  storageClassName: 'gp2'

---
# kind: scheduler-kubernetes

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gradle-server
  labels:
    app: gradle-enterprise
    component: scans-serve
spec:
  selector:
    matchLabels:
      app: gradle-enterprise
      component: scans-server
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  template:
    metadata:
      labels:
        app: gradle-enterprise
        component: scans-server
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 0
        fsGroup: 0
      containers:
      - name: gradle-server
        image: registry.replicated.com/gradleenterprise/gradle-server-image:38312861
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: '4Gi'
            cpu: 250m
          limits:
            memory: 4Gi
            cpu: 2
        env:
        - name: DATABASE_HOST
          value: 'gradle-database'
        - name: DATABASE_PORT
          value: '5432'
        - name: DATABASE_USER
          value: 'dotcom'
        - name: DATABASE_PASSWORD
          value: 'dotcom'
        - name: DATABASE_NAME
          value: 'dotcom'
        - name: DATABASE_PARAMETERS
          value: '?ssl=false'
        - name: DOTCOM_MODE__ENV
          value: 'PROD'
        - name: DOTCOM_SERVER__PUBLIC_ADDRESS
          value: 'http://gradle.factory.digi-leap.net'
        - name: DOTCOM_APP_HELP_PAGE__CONTACT_NAME
          value: 'Jaber Ahmadi'
        - name: DOTCOM_APP_HELP_PAGE__CONTACT_EMAIL_ADDRESS
          value: 'jaberahmadi@deloitte.co.uk'
        - name: DOTCOM_ADMIN_NOTIFICATION__TO
          value: ''
        - name: DOTCOM_ADMIN_NOTIFICATION__FROM
          value: ''
        - name: DOTCOM_SMTP__SERVER__ADDRESS
          value: ''
        - name: DOTCOM_SMTP__TRANSPORT_STRATEGY
          value: 'SMTP_PLAIN'      
        - name: DOTCOM_SMTP__AUTHENTICATION_METHOD
          value: 'NONE'
        - name: DOTCOM_SMTP__CREDENTIALS__USERNAME
          value: ''
        - name: DOTCOM_SMTP__CREDENTIALS__PASSWORD
          value: ''
        - name: PORT
          value: '8080'
        - name: SCANS_SERVER_OPTS
          value: '-Xms3072m -Xmx3072m -XX:MaxDirectMemorySize=768m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/gradle/data/logs/dump-new.hprof -XX:OnOutOfMemoryError="rm -f /opt/gradle/data/logs/dump.hprof;mv /opt/gradle/data/logs/dump-new.hprof /opt/gradle/data/logs/dump.hprof"'
        - name: DOTCOM_METRICS__GRADLE_ENTERPRISE_REPORTER__REPORTER_TYPE
          value: 'PLAIN'
        - name: DOTCOM_METRICS__STATSD__HOST
          value: 'gradle-metrics'
        - name: DOTCOM_METRICS__STATSD__PORT
          value: '8125'
        - name: DOTCOM_METRICS__GRADLE_ENTERPRISE_REPORTER__HOST
          value: 'gradle-metrics'
        - name: DOTCOM_METRICS__GRADLE_ENTERPRISE_REPORTER__PORT
          value: '2003'
        - name: DOTCOM_CLIENT_SIDE_SESSION__SECRET_KEY
          value: 'K5JnDQYSk3i7RxCu'
        - name: DOTCOM_CLIENT_SIDE_SESSION__SECRET_TOKEN
          value: 'qTdDEkD0p3dknMxO'
        - name: DOTCOM_DATA_RETENTION__KEEP_BUILD_DAYS
          value: ''
        - name: DOTCOM_DAILY_MAINTENANCE__MAINTENANCE_TIME
          value: '04:00'
        - name: DOTCOM_DISK_SPACE_MONITORING__WARNING_THRESHOLD_PERCENTAGE
          value: '10'
        - name: DOTCOM_DISK_SPACE_MONITORING__DATA_AUTO_DELETION_THRESHOLD_PERCENTAGE
          value: ''
        - name: DOTCOM_DISK_SPACE_MONITORING__INTAKE_REJECTION_THRESHOLD_PERCENTAGE
          value: ''
        - name: DOTCOM_FEATURE__OIDC_AUTH
          value: 'ENABLED'
        - name: DOTCOM_AUTH__CLIENT_ID
          value: 'gradle-enterprise'
        - name: DOTCOM_AUTH__CLIENT_SECRET
          value: '5e9z4zhrLk5ClLgOCyD8mKIv55R0n_xA'
        - name: DOTCOM_AUTH__AUTHORIZATION_URL
          value: 'http://gradle.factory.digi-leap.net/keycloak/realms/gradle-enterprise/protocol/openid-connect/auth'
        - name: DOTCOM_AUTH__TOKEN_URL
          value: 'http://gradle-keycloak:8083/keycloak/realms/gradle-enterprise/protocol/openid-connect/token'
        - name: DOTCOM_AUTH__LOGOUT_URL
          value: 'http://gradle.factory.digi-leap.net/keycloak/realms/gradle-enterprise/protocol/openid-connect/logout'
        - name: DOTCOM_AUTH__JWK_PROVIDER_URL
          value: 'http://gradle-keycloak:8083/keycloak/realms/gradle-enterprise/protocol/openid-connect/certs'
        - name: DOTCOM_AUTH__JWT_PUBLIC_ISSUER
          value: 'http://gradle.factory.digi-leap.net/keycloak/realms/gradle-enterprise'
        - name: DOTCOM_AUTH__JWT_PRIVATE_ISSUER
          value: 'http://gradle-keycloak:8083/keycloak/realms/gradle-enterprise'
        - name: DOTCOM_AUTH__KEYCLOAK_PUBLIC_ADDRESS
          value: 'http://gradle.factory.digi-leap.net/keycloak'
        - name: DOTCOM_AUTH__KEYCLOAK_PRIVATE_ADDRESS
          value: 'http://gradle-keycloak:8083/keycloak'
        - name: DOTCOM_AUTH__APP_AUTHORIZATION_CALLBACK_PATH
          value: 'scans/auth/oidc/token-exchange'
        - name: DOTCOM_AUTH__APP_LOGOUT_PATH
          value: 'scans/auth/oidc/logout'
        - name: DOTCOM_AUTH__APP_LOGIN_PATH
          value: 'scans/auth/oidc/login'
        - name: DOTCOM_FEATURE__ANONYMOUS_SCAN_VIEW_ACCESS
          value: 'DISABLED'
        - name: DOTCOM_FEATURE__ACCESS_KEY_AUTH
          value: 'DISABLED'
        - name: DOTCOM_ACCESS_KEY__EXCHANGE_URL
          value: 'http://gradle-admin:8082/admin/access-key-exchange'
        - name: DOTCOM_FEATURE__AUTHENTICATED_INGEST
          value: 'DISABLED'
        - name: DOTCOM_FEATURE__TEST_DASHBOARD
          value: ENABLED
        - name: DOTCOM_FEATURE__MAVEN_INGEST
          value: 'DISABLED'
        volumeMounts:
        - mountPath: /opt/gradle/data/logs
          name: logs
          subPath: server
        - mountPath: /opt/gradle/data/migrator-logs
          name: logs
          subPath: scans-server-database-migrator
      initContainers:
      - name: scans-server-migrator
        image: registry.replicated.com/gradleenterprise/gradle-scans-server-database-migrator-image:38312861
        command: ['/opt/run.sh']
        resources:
          requests:
            memory: 512Mi
            cpu: 200m
          limits:
            memory: 1Gi
            cpu: 500m
        env:
        - name: DATABASE_HOST
          value: 'gradle-database'
        - name: DATABASE_PORT
          value: '5432'
        - name: DATABASE_USER
          value: 'dotcom'
        - name: DATABASE_PASSWORD
          value: 'dotcom'
        - name: DATABASE_NAME
          value: 'dotcom'
        - name: DATABASE_MIGRATION_VERSION
          value: 'latest'
        volumeMounts:
        - mountPath: /opt/gradle/data/logs
          name: logs
          subPath: scans-server-database-migrator
      imagePullSecrets:
      - name: 'replicatedregistrykey'
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: gradle-server-logs-volume

---
# kind: scheduler-kubernetes

apiVersion: v1
kind: Service
metadata:
  name: gradle-server
spec:
  selector:
    app: gradle-enterprise
    component: scans-server
  ports:
  - port: 8080

---
# kind: scheduler-kubernetes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gradle-build-cache-volume
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: '10Gi'
  storageClassName: 'gp2-wait'

---
# kind: scheduler-kubernetes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gradle-build-cache-logs-volume
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi
  storageClassName: 'gp2-wait'

---
# kind: scheduler-kubernetes

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gradle-build-cache
  labels:
    app: gradle-enterprise
    component: build-cache-server
spec:
  selector:
    matchLabels:
      app: gradle-enterprise
      component: build-cache-server
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  template:
    metadata:
      labels:
        app: gradle-enterprise
        component: build-cache-server
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 0
        fsGroup: 0
      containers:
      - name: gradle-build-cache
        image: registry.replicated.com/gradleenterprise/gradle-build-cache-image:38312861
        ports:
        - containerPort: 8081
        resources:
          requests:
            memory: '2Gi'
            cpu: 100m
          limits:
            memory: 2Gi
            cpu: 2
        env:
        - name: DATABASE_HOST
          value: 'gradle-database'
        - name: DATABASE_PORT
          value: '5432'
        - name: DATABASE_USER
          value: 'dotcom'
        - name: DATABASE_PASSWORD
          value: 'dotcom'
        - name: DATABASE_NAME
          value: 'gcs_build_cache'
        - name: DATABASE_PARAMETERS
          value: '?ssl=false'
        - name: GEBCC_MODE__ENV
          value: 'PROD'
        - name: GEBCC_SERVER__PUBLIC_ADDRESS
          value: 'http://gradle.factory.digi-leap.net'
        - name: GEBCC_CLIENT_SIDE_SESSION__SECRET_KEY
          value: 'K5JnDQYSk3i7RxCu'
        - name: GEBCC_CLIENT_SIDE_SESSION__SECRET_TOKEN
          value: 'qTdDEkD0p3dknMxO'
        - name: GEBCC_RPC_CLIENT__ALLOW_UNTRUSTED_SSL
          value: ''
        - name: PORT
          value: '8081'
        - name: BUILD_CACHE_CONTROLLER_OPTS
          value: '-Xms1024m -Xmx1024m -XX:MaxDirectMemorySize=768m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/gradle/data/logs/dump-new.hprof -XX:OnOutOfMemoryError="rm -f /opt/gradle/data/logs/dump.hprof;mv /opt/gradle/data/logs/dump-new.hprof /opt/gradle/data/logs/dump.hprof"'
        - name: GEBCC_FEATURE__OIDC_AUTH
          value: 'ENABLED'
        - name: GEBCC_AUTH__CLIENT_ID
          value: 'gradle-enterprise'
        - name: GEBCC_AUTH__CLIENT_SECRET
          value: '5e9z4zhrLk5ClLgOCyD8mKIv55R0n_xA'
        - name: GEBCC_AUTH__AUTHORIZATION_URL
          value: 'http://gradle.factory.digi-leap.net/keycloak/realms/gradle-enterprise/protocol/openid-connect/auth'
        - name: GEBCC_AUTH__TOKEN_URL
          value: 'http://gradle-keycloak:8083/keycloak/realms/gradle-enterprise/protocol/openid-connect/token'
        - name: GEBCC_AUTH__LOGOUT_URL
          value: 'http://gradle.factory.digi-leap.net/keycloak/realms/gradle-enterprise/protocol/openid-connect/logout'
        - name: GEBCC_AUTH__JWK_PROVIDER_URL
          value: 'http://gradle-keycloak:8083/keycloak/realms/gradle-enterprise/protocol/openid-connect/certs'
        - name: GEBCC_AUTH__JWT_PUBLIC_ISSUER
          value: 'http://gradle.factory.digi-leap.net/keycloak/realms/gradle-enterprise'
        - name: GEBCC_AUTH__JWT_PRIVATE_ISSUER
          value: 'http://gradle-keycloak:8083/keycloak/realms/gradle-enterprise'
        - name: GEBCC_AUTH__KEYCLOAK_PUBLIC_ADDRESS
          value: 'http://gradle.factory.digi-leap.net/keycloak'
        - name: GEBCC_AUTH__KEYCLOAK_PRIVATE_ADDRESS
          value: 'http://gradle-keycloak:8083/keycloak'
        - name: GEBCC_AUTH__APP_AUTHORIZATION_CALLBACK_PATH
          value: 'cache-admin/auth/oidc/token-exchange'
        - name: GEBCC_AUTH__APP_LOGOUT_PATH
          value: 'cache-admin/auth/oidc/logout'
        - name: GEBCC_AUTH__APP_LOGIN_PATH
          value: 'cache-admin/auth/oidc/login'
        - name: GEBCC_FEATURE__ANONYMOUS_SCAN_VIEW_ACCESS
          value: 'DISABLED'
        - name: GEBCC_FEATURE__MAVEN_REMOTE_CACHE_REQUESTS
          value: 'DISABLED'
        - name: GEBCC_METRICS__GRADLE_ENTERPRISE_REPORTER__REPORTER_TYPE
          value: 'PLAIN'
        - name: GEBCC_METRICS__GRADLE_ENTERPRISE_REPORTER__HOST
          value: 'gradle-metrics'
        - name: GEBCC_METRICS__GRADLE_ENTERPRISE_REPORTER__PORT
          value: '2003'
        volumeMounts:
        - mountPath: /opt/gradle/data/build-cache
          name: build-cache
        - mountPath: /opt/gradle/data/logs
          name: logs
          subPath: build-cache
        - mountPath: /opt/gradle/data/migrator-logs
          name: logs
          subPath: build-cache-database-migrator
      initContainers:
      - name: gradle-build-cache-migrator
        image: registry.replicated.com/gradleenterprise/gradle-build-cache-database-migrator-image:38312861
        command: ['/opt/run.sh']
        resources:
          requests:
            memory: 512Mi
            cpu: 200m
          limits:
            memory: 1Gi
            cpu: 500m
        env:
        - name: DATABASE_HOST
          value: 'gradle-database'
        - name: DATABASE_PORT
          value: '5432'
        - name: DATABASE_USER
          value: 'dotcom'
        - name: DATABASE_PASSWORD
          value: 'dotcom'
        - name: DATABASE_NAME
          value: 'gcs_build_cache'
        - name: DATABASE_PARAMETERS
          value: '?ssl=false'
        - name: DATABASE_MIGRATION_VERSION
          value: 'latest'
        volumeMounts:
        - mountPath: /opt/gradle/data/logs
          name: logs
          subPath: build-cache-database-migrator
      imagePullSecrets:
      - name: 'replicatedregistrykey'
      volumes:
      - name: build-cache
        persistentVolumeClaim:
          claimName: gradle-build-cache-volume
      - name: logs
        persistentVolumeClaim:
          claimName: gradle-build-cache-logs-volume

---
# kind: scheduler-kubernetes

apiVersion: v1
kind: Service
metadata:
  name: gradle-build-cache
spec:
  selector:
    app: gradle-enterprise
    component: build-cache-server
  ports:
  - port: 8081

---
# kind: scheduler-kubernetes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gradle-admin-logs-volume
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi
  storageClassName: 'gp2'

---
# kind: scheduler-kubernetes

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gradle-admin
  labels:
    app: gradle-enterprise
    component: admin-server
spec:
  selector:
    matchLabels:
      app: gradle-enterprise
      component: admin-server
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  template:
    metadata:
      labels:
        app: gradle-enterprise
        component: admin-server
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 0
        fsGroup: 0
      containers:
      - name: gradle-admin
        image: registry.replicated.com/gradleenterprise/gradle-admin-image:38312861
        ports:
        - containerPort: 8082
        resources:
          requests:
            memory: '512Mi'
            cpu: 100m
          limits:
            memory: 2Gi
            cpu: 2
        env:
        - name: DATABASE_HOST
          value: 'gradle-database'
        - name: DATABASE_PORT
          value: '5432'
        - name: DATABASE_USER
          value: 'dotcom'
        - name: DATABASE_PASSWORD
          value: 'dotcom'
        - name: DATABASE_NAME
          value: 'gcs_admin'
        - name: DATABASE_PARAMETERS
          value: '?ssl=false'
        - name: GEADM_MODE__ENV
          value: 'PROD'
        - name: GEADM_SERVER__PUBLIC_ADDRESS
          value: 'http://gradle.factory.digi-leap.net'
        - name: PORT
          value: '8082'
        - name: ADMIN_APP_OPTS
          value: '-Xms256m -Xmx256m -XX:MaxDirectMemorySize=128m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/gradle/data/logs/dump-new.hprof -XX:OnOutOfMemoryError="rm -f /opt/gradle/data/logs/dump.hprof;mv /opt/gradle/data/logs/dump-new.hprof /opt/gradle/data/logs/dump.hprof"'
        - name: GEADM_INIT__INIT_KEY
          value: 'kjel_O6iKtETsVpwxY1dyfZEOe254_ts'
        - name: GEADM_CLIENT_SIDE_SESSION__SECRET_KEY
          value: 'K5JnDQYSk3i7RxCu'
        - name: GEADM_CLIENT_SIDE_SESSION__SECRET_TOKEN
          value: 'qTdDEkD0p3dknMxO'
        - name: GEADM_KEYCLOAK__KEYCLOAK_ADMIN_API_ADDRESS
          value: 'http://gradle-keycloak:8083/keycloak'
        - name: GEADM_KEYCLOAK__KEYCLOAK_ADMIN_API_USERNAME
          value: 'ge-admin'
        - name: GEADM_KEYCLOAK__KEYCLOAK_ADMIN_API_PASSWORD
          value: 'kjel_O6iKtETsVpwxY1dyfZEOe254_ts'
        - name: GEADM_FEATURE__OIDC_AUTH
          value: 'ENABLED'
        - name: GEADM_AUTH__CLIENT_ID
          value: 'gradle-enterprise'
        - name: GEADM_AUTH__CLIENT_SECRET
          value: '5e9z4zhrLk5ClLgOCyD8mKIv55R0n_xA'
        - name: GEADM_AUTH__AUTHORIZATION_URL
          value: 'http://gradle.factory.digi-leap.net/keycloak/realms/gradle-enterprise/protocol/openid-connect/auth'
        - name: GEADM_AUTH__TOKEN_URL
          value: 'http://gradle-keycloak:8083/keycloak/realms/gradle-enterprise/protocol/openid-connect/token'
        - name: GEADM_AUTH__LOGOUT_URL
          value: 'http://gradle.factory.digi-leap.net/keycloak/realms/gradle-enterprise/protocol/openid-connect/logout'
        - name: GEADM_AUTH__JWK_PROVIDER_URL
          value: 'http://gradle-keycloak:8083/keycloak/realms/gradle-enterprise/protocol/openid-connect/certs'
        - name: GEADM_AUTH__JWT_PUBLIC_ISSUER
          value: 'http://gradle.factory.digi-leap.net/keycloak/realms/gradle-enterprise'
        - name: GEADM_AUTH__JWT_PRIVATE_ISSUER
          value: 'http://gradle-keycloak:8083/keycloak/realms/gradle-enterprise'
        - name: GEADM_AUTH__KEYCLOAK_PUBLIC_ADDRESS
          value: 'http://gradle.factory.digi-leap.net/keycloak'
        - name: GEADM_AUTH__KEYCLOAK_PRIVATE_ADDRESS
          value: 'http://gradle-keycloak:8083/keycloak'
        - name: GEADM_AUTH__APP_AUTHORIZATION_CALLBACK_PATH
          value: 'admin/auth/oidc/token-exchange'
        - name: GEADM_AUTH__APP_LOGOUT_PATH
          value: 'admin/auth/oidc/logout'
        - name: GEADM_AUTH__APP_LOGIN_PATH
          value: 'admin/auth/oidc/login'
        - name: GEADM_FEATURE__TEST_DISTRIBUTION
          value: ENABLED
        - name: GEADM_FEATURE__MAVEN_INGEST
          value: 'DISABLED'
        - name: GEADM_FEATURE__MAVEN_LOCAL_CACHE_REQUESTS
          value: 'DISABLED'
        - name: GEADM_FEATURE__MAVEN_REMOTE_CACHE_REQUESTS
          value: 'DISABLED'
        - name: GEADM_METRICS__GRADLE_ENTERPRISE_REPORTER__REPORTER_TYPE
          value: 'PLAIN'
        - name: GEADM_METRICS__GRADLE_ENTERPRISE_REPORTER__HOST
          value: 'gradle-metrics'
        - name: GEADM_METRICS__GRADLE_ENTERPRISE_REPORTER__PORT
          value: '2003'
        volumeMounts:
        - mountPath: /opt/gradle/data/logs
          name: logs
          subPath: admin
        - mountPath: /opt/gradle/data/migrator-logs
          name: logs
          subPath: admin-database-migrator
      initContainers:
      - name: admin-database-migrator
        image: registry.replicated.com/gradleenterprise/gradle-admin-database-migrator-image:38312861
        command: ['/opt/run.sh']
        resources:
          requests:
            memory: 512Mi
            cpu: 200m
          limits:
            memory: 1Gi
            cpu: 500m
        env:
        - name: DATABASE_HOST
          value: 'gradle-database'
        - name: DATABASE_PORT
          value: '5432'
        - name: DATABASE_USER
          value: 'dotcom'
        - name: DATABASE_PASSWORD
          value: 'dotcom'
        - name: DATABASE_NAME
          value: 'gcs_admin'
        - name: DATABASE_PARAMETERS
          value: '?ssl=false'
        - name: DATABASE_MIGRATION_VERSION
          value: 'latest'
        volumeMounts:
        - mountPath: /opt/gradle/data/logs
          name: logs
          subPath: admin-database-migrator  
      imagePullSecrets:
      - name: 'replicatedregistrykey'
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: gradle-admin-logs-volume

---
# kind: scheduler-kubernetes

apiVersion: v1
kind: Service
metadata:
  name: gradle-admin
spec:
  selector:
    app: gradle-enterprise
    component: admin-server
  ports:
  - port: 8082

---
# kind: scheduler-kubernetes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gradle-keycloak-logs-volume
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi
  storageClassName: 'gp2'

---
# kind: scheduler-kubernetes

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gradle-keycloak
  labels:
    app: gradle-enterprise
    component: keycloak-server
spec:
  selector:
    matchLabels:
      app: gradle-enterprise
      component: keycloak-server
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  template:
    metadata:
      annotations:
        trusted-ssl-hash: ''
      labels:
        app: gradle-enterprise
        component: keycloak-server
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 0
        fsGroup: 0
      containers:
      - name: gradle-keycloak
        image: registry.replicated.com/gradleenterprise/gradle-keycloak-image:38312861
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: '1Gi'
            cpu: 100m
          limits:
            memory: 2Gi
            cpu: 2
        env:
        - name: DATABASE_HOST
          value: 'gradle-database'
        - name: DATABASE_PORT
          value: '5432'
        - name: DATABASE_USER
          value: 'dotcom'
        - name: DATABASE_PASSWORD
          value: 'dotcom'
        - name: DATABASE_PARAMETERS
          value: '?ssl=false'
        - name: JDBC_PARAMS
          value: '?ssl=false'
        - name: DATABASE_NAME
          value: 'gcs_keycloak'
        volumeMounts:
        - mountPath: /opt/gradle/data/logs
          name: logs
          subPath: keycloak
        - mountPath: /opt/gradle/data/migrator-logs
          name: logs
          subPath: keycloak-config-initializer
      initContainers:
      - name: gradle-keycloak-config-initializer
        image: registry.replicated.com/gradleenterprise/gradle-keycloak-config-initializer-image:38312861
        command: ['/opt/run.sh']
        resources:
          requests:
            memory: 512Mi
            cpu: 200m
          limits:
            memory: 1Gi
            cpu: 500m
        env:
        - name: DATABASE_HOST
          value: 'gradle-database'
        - name: DATABASE_PORT
          value: '5432'
        - name: DATABASE_USER
          value: 'dotcom'
        - name: DATABASE_PASSWORD
          value: 'dotcom'
        - name: DATABASE_PARAMETERS
          value: '?ssl=false'
        - name: JDBC_PARAMS
          value: '?ssl=false'
        - name: DATABASE_NAME
          value: 'gcs_keycloak'
        - name: DATABASE_MIGRATION_VERSION
          value: 'latest'
        - name: KEYCLOAK_ADMIN_USER
          value: 'ge-admin'
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: 'kjel_O6iKtETsVpwxY1dyfZEOe254_ts'
        - name: KEYCLOAK_CLIENT_SECRET
          value: '5e9z4zhrLk5ClLgOCyD8mKIv55R0n_xA'
        volumeMounts:
        - mountPath: /opt/gradle/data/logs
          name: logs
          subPath: keycloak-config-initializer
        - mountPath: /opt/gradle/cacerts
          name: cacerts
      imagePullSecrets:
      - name: 'replicatedregistrykey'
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: gradle-keycloak-logs-volume
      - name: cacerts
        secret:
          secretName: gradle-certificates-secret

---
# kind: scheduler-kubernetes

apiVersion: v1
kind: Service
metadata:
  name: gradle-keycloak
spec:
  selector:
    app: gradle-enterprise
    component: keycloak-server
  ports:
  - name: keycloak
    port: 8083
    targetPort: 8080
---

# kind: scheduler-kubernetes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gradle-test-distribution-broker-file-cache-volume
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: '10Gi'
  storageClassName: 'gp2'

---
# kind: scheduler-kubernetes

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gradle-test-distribution-logs-volume
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi
  storageClassName: 'gp2'
---
# kind: scheduler-kubernetes

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gradle-test-distribution-broker
  labels:
    app: gradle-enterprise
    component: test-distribution-broker
spec:
  selector:
    matchLabels:
      app: gradle-enterprise
      component: test-distribution-broker
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  template:
    metadata:
      labels:
        app: gradle-enterprise
        component: test-distribution-broker
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 0
        fsGroup: 0
      containers:
        - name: gradle-test-distribution-broker
          image: registry.replicated.com/gradleenterprise/gradle-test-distribution-broker-image:38312861
          ports:
            - containerPort: 5090
          resources:
            requests:
              memory: 2Gi
              cpu: 200m
            limits:
              memory: 2Gi
              cpu: '2'
          env:
            - name: GETDB_MODE__ENV
              value: 'PROD'
            - name: TEST_DISTRIBUTION_BROKER_OPTS
              value: '-Xms256m -Xmx1024m -XX:MaxDirectMemorySize=768m -XX:+UseStringDeduplication -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/gradle/data/logs/dump-new.hprof -XX:OnOutOfMemoryError="rm -f /opt/gradle/data/logs/dump.hprof;mv /opt/gradle/data/logs/dump-new.hprof /opt/gradle/data/logs/dump.hprof"'
            - name: GETDB_FEATURE__ACCESS_KEY_AUTH
              value: 'DISABLED'
            - name: GETDB_ACCESS_KEY__EXCHANGE_URL
              value: 'http://gradle-admin:8082/admin/access-key-exchange'
            - name: GETDB_CONTROLLER__INTERNAL_ADDRESS
              value: 'http://gradle-admin:8082'
            - name: GETDB_CONTROLLER__PUBLIC_ADDRESS
              value: 'https://gradle.factory.digi-leap.net/'
            - name: GETDB_METRICS__GRADLE_ENTERPRISE_REPORTER__REPORTER_TYPE
              value: 'PLAIN'
            - name: GETDB_METRICS__GRADLE_ENTERPRISE_REPORTER__HOST
              value: 'gradle-metrics'
            - name: GETDB_METRICS__GRADLE_ENTERPRISE_REPORTER__PORT
              value: '2003'
          volumeMounts:
            - mountPath: /opt/gradle/data/test-distribution-broker-file-cache
              name: test-distribution-broker-file-cache
            - mountPath: /opt/gradle/data/logs
              name: logs
              subPath: test-distribution-broker
      imagePullSecrets:
        - name: 'replicatedregistrykey'
      volumes:
        - name: test-distribution-broker-file-cache
          persistentVolumeClaim:
            claimName: gradle-test-distribution-broker-file-cache-volume
        - name: logs
          persistentVolumeClaim:
            claimName: gradle-test-distribution-logs-volume

---
# kind: scheduler-kubernetes

apiVersion: v1
kind: Service
metadata:
  name: gradle-test-distribution-broker
spec:
  selector:
    app: gradle-enterprise
    component: test-distribution-broker
  ports:
    - port: 8084
      targetPort: 5090

---
# kind: scheduler-kubernetes

apiVersion: v1
kind: Secret
metadata:
  name: gradle-proxy-ssl-secret
data:
  server.key: ''
  server.cert: ''

---
# kind: scheduler-kubernetes

apiVersion: v1
kind: ConfigMap
metadata:
  name: gradle-proxy-config
data:
  default.conf: |
    upstream appserver {
      server gradle-server:8080 fail_timeout=0;
    
      keepalive 32;
    }
    
    upstream cacheserver {
      server gradle-build-cache:8081 fail_timeout=0;
    
      keepalive 32;
    }
    
    upstream adminserver {
      server gradle-admin:8082 fail_timeout=0;
    
      keepalive 32;
    }
    
    upstream keycloakserver {
      server gradle-keycloak:8083 fail_timeout=0;
    
      keepalive 32;
    }
    
    upstream testdistributionbroker {
      server gradle-test-distribution-broker:8084 fail_timeout=0;
    
      keepalive 32;
    }
    
    proxy_cache_path /var/cache/nginx/gradle levels=1:2 keys_zone=my_cache:1m max_size=64m
                      inactive=365d use_temp_path=off;
    
    # Forward on any forward address info sent from an upstream proxy
    # This is currently necessary in order to support upstream SSL termination
    # and/or an upstream proxy listening on a different port to this server.
    #
    # This is a temporary solution.
    # Instead, we should use the address our app is configured with for all things.
    # This ensures that our app can create links (e.g. emails) with the address that it should be contacted on.
    map $http_x_forwarded_host $forwardedHost {
      default   $http_x_forwarded_host;
      ""        $http_host;
    }
    map $http_x_forwarded_proto $forwardedScheme {
      default   $http_x_forwarded_proto;
      ""        $scheme;
    }
    map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
    }
    
    server {
      client_max_body_size 0;
      
      listen 0.0.0.0:9080;

      server_name gradle.factory.digi-leap.net;
    
      location / {
        proxy_cache              my_cache;
        proxy_pass               http://appserver;
        include /etc/nginx/nginx_proxy.conf;
        error_page 502 504 /unavailable.html;
    
        location /in/ {
          proxy_pass               http://appserver;
          include /etc/nginx/nginx_proxy.conf;
          # This value should be kept in sync with IngestResponseKeepAliveHandler
          keepalive_timeout 10800s 10800;
        }
      }
    
      location ~ ^/cache {
        proxy_pass               http://cacheserver;
        include /etc/nginx/nginx_proxy.conf;
        # We need to clear out the Accept-Encoding header to keep Netty from trying to gzip compress responses for us
        proxy_set_header         Accept-Encoding "";
        error_page 502 504 /unavailable.html;
      }

      location ^~ /admin/access-key-exchange {
        rewrite ^ /not-found break;
        proxy_pass http://appserver;
      }
    
      location ~ ^/admin {
        proxy_cache              my_cache;
        proxy_pass               http://adminserver;
        include /etc/nginx/nginx_proxy.conf;
        # We need to clear out the Accept-Encoding header to keep Netty from trying to gzip compress responses for us
        proxy_set_header         Accept-Encoding "";
        error_page 502 504 /unavailable.html;
      }
    
      location ~ ^/entitlements {
        proxy_cache              my_cache;
        proxy_pass               http://adminserver;
        include /etc/nginx/nginx_proxy.conf;
        # We need to clear out the Accept-Encoding header to keep Netty from trying to gzip compress responses for us
        proxy_set_header         Accept-Encoding "";
        error_page 502 504 /unavailable.html;
      }

      location ~ ^/provision-access-key {
        proxy_cache              my_cache;
        proxy_pass               http://adminserver;
        include /etc/nginx/nginx_proxy.conf;
        # We need to clear out the Accept-Encoding header to keep Netty from trying to gzip compress responses for us
        proxy_set_header         Accept-Encoding "";
        error_page 502 504 /unavailable.html;
      }
    
      location ~ ^/settings {
        proxy_cache              my_cache;
        proxy_pass               http://adminserver;
        include /etc/nginx/nginx_proxy.conf;
        # We need to clear out the Accept-Encoding header to keep Netty from trying to gzip compress responses for us
        proxy_set_header         Accept-Encoding "";
        error_page 502 504 /unavailable.html;
      }

      location ~ ^/distribution-broker {
        proxy_pass               http://testdistributionbroker;
        include /etc/nginx/nginx_proxy.conf;
        # We need to clear out the Accept-Encoding header to keep Netty from trying to gzip compress responses for us
        proxy_set_header         Accept-Encoding "";
        proxy_set_header         Upgrade $http_upgrade;
        proxy_set_header         Connection $connection_upgrade;
        proxy_read_timeout       1m;
        error_page 502 504 /unavailable.html;
      }

      location ~ ^/distribution/agent {
        proxy_pass               http://adminserver;
        include /etc/nginx/nginx_proxy.conf;
        # We need to clear out the Accept-Encoding header to keep Netty from trying to gzip compress responses for us
        proxy_set_header         Accept-Encoding "";
        error_page 502 504 /unavailable.html;
      }

      location ~ ^/keycloak/realms/gradle-enterprise/account.*$ {
        rewrite ^ /not-found break;
        proxy_pass http://appserver;
      }
    
      location ~ ^/keycloak/realms/master/login-actions/.*$ {
        rewrite ^ /not-found break;
        proxy_method GET;
        proxy_pass http://appserver;
      }

      location ~ ^/keycloak/admin/master/console.*$ {
        rewrite ^ /not-found break;
        proxy_pass http://appserver;
      }

      location ~ ^/keycloak/.+ {
          proxy_cache              my_cache;
          proxy_pass               http://keycloakserver;
          include /etc/nginx/nginx_proxy.conf;
          error_page 502 504 /unavailable.html;
          proxy_buffer_size          16k;
          proxy_buffers              4 32k;
          proxy_busy_buffers_size    32k;
        }
    
      location /unavailable.html {
        root /etc/nginx/www;
        internal;
      }
    
      include /etc/nginx/fcgiwrap.conf;
    }
    
    log_format requestid '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent" "$http_x_request_id"';
    
    access_log /opt/gradle/data/logs/proxy-access.log requestid;
    error_log /opt/gradle/data/logs/proxy-error.log warn;

---
# kind: scheduler-kubernetes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gradle-proxy-logs-volume
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi
  storageClassName: 'gp2'

---
# kind: scheduler-kubernetes

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gradle-proxy
spec:
  selector:
    matchLabels:
      app: gradle-enterprise
      component: proxy
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  template:
    metadata:
      labels:
        app: gradle-enterprise
        component: proxy
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 0
        fsGroup: 0
      containers:
      - name: gradle-proxy
        image: registry.replicated.com/gradleenterprise/gradle-proxy-image:38312861
        ports:
        - containerPort: 9080
        - containerPort: 9443
        resources:
          requests:
            memory: '512Mi'
            cpu: 100m
          limits:
            memory: 1Gi
            cpu: 500m
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec supervisorctl status nginx | grep RUNNING
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        env:
        - name: SSL_ENABLED # This is just here to ensure the Pod is recreated when this config option changes
          value: '0'
        volumeMounts:
        - mountPath: /opt/certs
          name: ssl-certs
        - mountPath: /etc/nginx/conf.d
          name: config
        - mountPath: /opt/gradle/data/logs
          name: logs
          subPath: proxy
      imagePullSecrets:
      - name: 'replicatedregistrykey'
      volumes:
      - name: ssl-certs
        secret:
          secretName: gradle-proxy-ssl-secret
      - name: logs
        persistentVolumeClaim:
          claimName: gradle-proxy-logs-volume
      - name: config
        configMap:
          name: gradle-proxy-config

---
# kind: scheduler-kubernetes

apiVersion: v1
kind: Service
metadata:
  name: gradle-proxy
spec:
  selector:
    app: gradle-enterprise
    component: proxy
  ports:
  - name: http
    port: 80
    targetPort: 9080
  - name: https
    port: 443
    targetPort: 9443

---

# kind: scheduler-kubernetes

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gradle-metrics-volume
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi
  storageClassName: 'gp2'

---
# kind: scheduler-kubernetes

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gradle-metrics
  labels:
    app: gradle-enterprise
    component: metrics
spec:
  selector:
    matchLabels:
      app: gradle-enterprise
      component: metrics
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  template:
    metadata:
      labels:
        app: gradle-enterprise
        component: metrics
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 9999
        fsGroup: 9999
      containers:
        - name: gradle-metrics
          image: registry.replicated.com/gradleenterprise/gradle-metrics-image:38312861
          ports:
            - containerPort: 2003
            - containerPort: 2004
            - containerPort: 9900
            - containerPort: 8125
              protocol: UDP
          resources:
            requests:
              memory: 256Mi
              cpu: 50m
            limits:
              memory: 512Mi
              cpu: 250m
          livenessProbe:
            httpGet:
              path: /
              port: 9900
            initialDelaySeconds: 30
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              port: 9900
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 5
          volumeMounts:
            - mountPath: /opt/graphite/storage/whisper
              name: storage
            - mountPath: /opt/graphite/conf/storage-aggregation.conf
              name: config
              subPath: storage-aggregation.conf
            - mountPath: /opt/graphite/conf/storage-schemas.conf
              name: config
              subPath: storage-schemas.conf
            - mountPath: /etc/nginx/sites-enabled/graphite
              name: config
              subPath: graphite
      imagePullSecrets:
        - name: 'replicatedregistrykey'
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: gradle-metrics-volume
        - name: config
          configMap:
            name: gradle-metrics-config

---

# kind: scheduler-kubernetes

apiVersion: v1
kind: ConfigMap
metadata:
  name: gradle-metrics-config
data:
  storage-aggregation.conf: |
    [stats.gauges.gradle.backup.runtime]
    pattern = stats.gauges.gradle.backup.runtime
    aggregationMethod = max
    xFilesFactor = 0.000000

    [stats.gauges.gradle.df.*]
    pattern = stats.gauges.gradle.df.*
    aggregationMethod = max
    xFilesFactor = 0.000000

    [stats.gauges.gradle.scans.*]
    pattern = stats.gauges.gradle.scans.*
    aggregationMethod = average
    xFilesFactor = 0.000000

    [default]
    pattern = .*
    aggregationMethod = average
  storage-schemas.conf: |
    [stats.gauges.gradle.backup.runtime]
    pattern = stats.gauges.gradle.backup.runtime
    retentions = 1m:1h,1h:30d,1d:90d

    [stats.gauges.gradle.df.*]
    pattern = stats.gauges.gradle.df.*
    retentions = 10s:1h,1h:30d,1d:90d

    [stats.gauges.gradle.scans.*]
    pattern = stats.gauges.gradle.scans.*
    retentions = 1m:72h,10m:14d,1h:30d

    [default]
    pattern = .*
  graphite: |
    upstream graphite {
        server 127.0.0.1:8080 fail_timeout=0;
    }

    server {
        listen 9900;

        access_log /var/log/nginx/graphite.access.log;
        error_log /var/log/nginx/graphite.error.log;

        charset utf-8;
        root /opt/graphite/webapp/content;

        location /content {
            alias /opt/graphite/webapp/content;
        }

        location /static {
            alias /opt/graphite/webapp/content;
        }

        location / {
            include uwsgi_params;
            uwsgi_pass graphite;

            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
            add_header 'Access-Control-Allow-Credentials' 'true';

            # uwsgi is picky about host name format.  Passing 'statsd_replicated:2443',
            # which is what swarm uses for service name, make uwsgi return a 400.
            uwsgi_param HTTP_HOST replicated;
        }

        location /static/admin {
            alias /usr/lib/python2.7/dist-packages/django/contrib/admin/static/admin;
        }
    }

---

# kind: scheduler-kubernetes

apiVersion: v1
kind: Service
metadata:
  name: gradle-metrics
spec:
  selector:
    app: gradle-enterprise
    component: metrics
  ports:
    - name: carbon
      port: 2003
    - name: carbon-pickle
      port: 2004
    - name: graphite
      port: 9900
    - name: statsd
      port: 8125
      protocol: UDP

---

apiVersion: v1
kind: Secret
metadata:
  name: gradle-certificates-secret
data:
  trusted-ssl.crt: ''
